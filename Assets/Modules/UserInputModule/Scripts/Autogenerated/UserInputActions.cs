//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Modules/UserInput/Assets/UserInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SDRGames.Whist.UserInputModule
{
    public partial class @UserInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""781d58d9-bed1-4723-8be7-97fea9ad830c"",
            ""actions"": [
                {
                    ""name"": ""LeftMouseButtonClick"",
                    ""type"": ""Button"",
                    ""id"": ""61a78019-9b3c-421a-8cc0-43f53756cb48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8502081-747d-46c3-b4af-83d0cf3abd97"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseButtonClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""e5fefe07-3015-4de0-8729-d7138469b535"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""1b0667f1-d30b-4ffa-96a9-763302cd8062"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""61a40697-769c-4cf0-9fb3-90fc42f389c6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5eb8a06-2810-429e-bdb5-6948699d0750"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48c4883f-66b2-45da-bcc0-3e8053969f0c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ee7a568e-6889-4914-a816-4615f8ed79f3"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b7568ef3-33b4-401d-9a7f-fa82282108da"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8208ea26-682e-4a2a-8e78-400824102c53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hover"",
                    ""type"": ""Value"",
                    ""id"": ""792af74f-bcc2-440e-bd68-0cf5c9fa652c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d0f65208-28fb-438e-96ff-16b44e66bf17"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5304e4d-6ae0-4d32-9952-b00516cc8cec"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1486abf7-3891-471a-b4a7-1fab5df89813"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_LeftMouseButtonClick = m_Movement.FindAction("LeftMouseButtonClick", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
            m_Camera_Rotate = m_Camera.FindAction("Rotate", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
            m_UI_Scroll = m_UI.FindAction("Scroll", throwIfNotFound: true);
            m_UI_Hover = m_UI.FindAction("Hover", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private IMovementActions m_MovementActionsCallbackInterface;
        private readonly InputAction m_Movement_LeftMouseButtonClick;
        public struct MovementActions
        {
            private @UserInputActions m_Wrapper;
            public MovementActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftMouseButtonClick => m_Wrapper.m_Movement_LeftMouseButtonClick;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterface != null)
                {
                    @LeftMouseButtonClick.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeftMouseButtonClick;
                    @LeftMouseButtonClick.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeftMouseButtonClick;
                    @LeftMouseButtonClick.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeftMouseButtonClick;
                }
                m_Wrapper.m_MovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftMouseButtonClick.started += instance.OnLeftMouseButtonClick;
                    @LeftMouseButtonClick.performed += instance.OnLeftMouseButtonClick;
                    @LeftMouseButtonClick.canceled += instance.OnLeftMouseButtonClick;
                }
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Zoom;
        private readonly InputAction m_Camera_Rotate;
        public struct CameraActions
        {
            private @UserInputActions m_Wrapper;
            public CameraActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
            public InputAction @Rotate => m_Wrapper.m_Camera_Rotate;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Rotate.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotate;
                    @Rotate.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotate;
                    @Rotate.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotate;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Zoom.started += instance.OnZoom;
                    @Zoom.performed += instance.OnZoom;
                    @Zoom.canceled += instance.OnZoom;
                    @Rotate.started += instance.OnRotate;
                    @Rotate.performed += instance.OnRotate;
                    @Rotate.canceled += instance.OnRotate;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_Click;
        private readonly InputAction m_UI_Scroll;
        private readonly InputAction m_UI_Hover;
        public struct UIActions
        {
            private @UserInputActions m_Wrapper;
            public UIActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputAction @Scroll => m_Wrapper.m_UI_Scroll;
            public InputAction @Hover => m_Wrapper.m_UI_Hover;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Scroll.started -= m_Wrapper.m_UIActionsCallbackInterface.OnScroll;
                    @Scroll.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnScroll;
                    @Scroll.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnScroll;
                    @Hover.started -= m_Wrapper.m_UIActionsCallbackInterface.OnHover;
                    @Hover.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnHover;
                    @Hover.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnHover;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                    @Scroll.started += instance.OnScroll;
                    @Scroll.performed += instance.OnScroll;
                    @Scroll.canceled += instance.OnScroll;
                    @Hover.started += instance.OnHover;
                    @Hover.performed += instance.OnHover;
                    @Hover.canceled += instance.OnHover;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface IMovementActions
        {
            void OnLeftMouseButtonClick(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnZoom(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnHover(InputAction.CallbackContext context);
        }
    }
}
